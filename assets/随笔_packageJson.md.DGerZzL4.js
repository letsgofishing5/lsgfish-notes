import{_ as e,c as s,o as a,a4 as t}from"./chunks/framework.CXKHhAhX.js";const k=JSON.parse('{"title":"node","description":"","frontmatter":{},"headers":[],"relativePath":"随笔/packageJson.md","filePath":"随笔/packageJson.md"}'),i={name:"随笔/packageJson.md"},o=t('<h1 id="node" tabindex="-1">node <a class="header-anchor" href="#node" aria-label="Permalink to &quot;node&quot;">​</a></h1><h2 id="pacage-json-配置文件" tabindex="-1">pacage.json 配置文件 <a class="header-anchor" href="#pacage-json-配置文件" aria-label="Permalink to &quot;pacage.json 配置文件&quot;">​</a></h2><p><code>package.json</code> 是Node.js项目的核心配置文件，用于存储项目的元数据和依赖信息。以下是<code>package.json</code>中一些关键字段的详细解析：</p><h3 id="基本元数据字段" tabindex="-1">基本元数据字段 <a class="header-anchor" href="#基本元数据字段" aria-label="Permalink to &quot;基本元数据字段&quot;">​</a></h3><ul><li><strong>name</strong>: 项目或模块的名称。在npm上发布的包名应该是唯一的，并且符合npm的命名规范。</li><li><strong>version</strong>: 包的版本号，遵循语义化版本控制（Semantic Versioning）规范，格式为 <code>主版本.次版本.修订版本</code>。</li><li><strong>description</strong>: 对项目的简短描述。</li><li><strong>keywords</strong>: 项目相关的关键词数组，有助于提高搜索发现度。</li><li><strong>author</strong>: 项目的作者信息，可以是字符串或对象（包含作者名、邮箱、网址）。</li><li><strong>license</strong>: 项目使用的许可协议。</li></ul><h3 id="依赖管理" tabindex="-1">依赖管理 <a class="header-anchor" href="#依赖管理" aria-label="Permalink to &quot;依赖管理&quot;">​</a></h3><ul><li><strong>dependencies</strong>: 生产环境中项目运行所依赖的模块及其版本。</li><li><strong>devDependencies</strong>: 开发过程中需要的模块及其版本，如测试框架、构建工具等，不会随着最终产品分发给用户。</li></ul><h3 id="脚本命令-scripts" tabindex="-1">脚本命令（scripts） <a class="header-anchor" href="#脚本命令-scripts" aria-label="Permalink to &quot;脚本命令（scripts）&quot;">​</a></h3><ul><li><strong>scripts</strong>: 定义了一系列可执行的脚本命令，如 <code>&quot;start&quot;: &quot;node index.js&quot;</code> 允许你通过 <code>npm start</code> 快速启动项目。</li></ul><h3 id="其他重要字段" tabindex="-1">其他重要字段 <a class="header-anchor" href="#其他重要字段" aria-label="Permalink to &quot;其他重要字段&quot;">​</a></h3><ul><li><strong>main</strong>: 指定项目的主要入口文件，当模块被 <code>require()</code> 时，这个字段告诉Node.js应该加载哪个文件。</li><li><strong>bin</strong>: 如果包提供了可执行命令，可以在这里定义命令名与可执行文件的映射关系。</li><li><strong>directories</strong>: 指定项目中的特定目录，如 <code>test</code>、<code>lib</code> 等。</li><li><strong>repository</strong>: 项目的仓库地址，方便他人克隆或查看源码。</li><li><strong>bugs</strong>: 报告bug的链接或邮件地址。</li><li><strong>homepage</strong>: 项目的主页或文档地址。</li><li><strong>engines</strong>: 指定项目运行所需的Node.js或npm版本。</li><li><strong>files</strong>: 列出要包含在包中的文件或目录，有助于减小发布包的大小。</li><li><strong>types</strong> 或 <strong>typings</strong>: （对于TypeScript项目）指定 TypeScript 类型声明文件的位置。</li><li><strong>exports</strong>: 控制模块的导出行为，特别是在引入ESM模块时非常有用，可以精细控制不同条件下的导出入口。</li></ul><h3 id="可选字段" tabindex="-1">可选字段 <a class="header-anchor" href="#可选字段" aria-label="Permalink to &quot;可选字段&quot;">​</a></h3><ul><li><strong>private</strong>: 当设置为 <code>true</code> 时，表明这个包不应该被发布到公共npm仓库。</li><li><strong>scripts</strong> 中还可以包括更多自定义脚本，如 <code>&quot;test&quot;: &quot;jest&quot;</code> 用于运行测试。</li></ul><h3 id="版本依赖号" tabindex="-1">版本依赖号 <a class="header-anchor" href="#版本依赖号" aria-label="Permalink to &quot;版本依赖号&quot;">​</a></h3><ul><li><p><code>~</code> 波浪号，匹配最新补丁版本号，即版本号的第三个数字，例如 <code>~5.0.0</code> 就会匹配 5.0.x 版本，将在 5.1.0 停止</p></li><li><p><code>^</code> 插入符号，匹配次要的版本号，即版本号的第二个数字，例如 <code>^5.2.0</code> 就会匹配等于或大于设置的版本(这里就是 &gt;= 5.2.0 &lt; 6.0.0 )，将在 6.0.0 停止</p></li><li><p><code>&gt;、&lt;、&gt;=、&lt;=</code> 比较运算符，匹配的就是这个区间的版本，例如 <code>&gt;2.0.0 &lt;= 2.1.4 </code>，就会匹配这个区间的版本号</p></li></ul><h2 id="npm-包管理" tabindex="-1">npm 包管理 <a class="header-anchor" href="#npm-包管理" aria-label="Permalink to &quot;npm 包管理&quot;">​</a></h2><h3 id="包发布" tabindex="-1">包发布 <a class="header-anchor" href="#包发布" aria-label="Permalink to &quot;包发布&quot;">​</a></h3><ol><li><p><strong>在终端登录 npm</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span></code></pre></div></li><li><p><strong>发布 npm 包</strong></p><p>发包时，name名称不能是已经存在的，并且每次发包时版本号都要升级</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span></span></code></pre></div></li><li><p><strong>删除已发布的包</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unpublish</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> peer-dependencies-cobyte</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force</span></span></code></pre></div></li></ol>',18),n=[o];function l(r,d,c,p,h,g){return a(),s("div",null,n)}const b=e(i,[["render",l]]);export{k as __pageData,b as default};
